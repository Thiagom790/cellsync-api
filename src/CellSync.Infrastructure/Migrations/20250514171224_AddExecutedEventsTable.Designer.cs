// <auto-generated />
using System;
using CellSync.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CellSync.Infrastructure.Migrations
{
    [DbContext(typeof(CellSyncDbContext))]
    [Migration("20250514171224_AddExecutedEventsTable")]
    partial class AddExecutedEventsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CellSync.Domain.Entities.Cell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CurrentLeaderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurrentLeaderId");

                    b.ToTable("Cells");
                });

            modelBuilder.Entity("CellSync.Domain.Entities.CellLeaderHistory", b =>
                {
                    b.Property<Guid>("CellId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LeaderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("CellId", "LeaderId");

                    b.HasIndex("LeaderId");

                    b.ToTable("CellsLeaderHistory");
                });

            modelBuilder.Entity("CellSync.Domain.Entities.ExecutedEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ExecutedEvents");
                });

            modelBuilder.Entity("CellSync.Domain.Entities.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CellId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LeaderId")
                        .HasColumnType("uuid");

                    b.Property<string>("MeetingAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("MeetingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CellId");

                    b.HasIndex("LeaderId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("CellSync.Domain.Entities.MeetingMember", b =>
                {
                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.HasKey("MeetingId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("MeetingMembers");
                });

            modelBuilder.Entity("CellSync.Domain.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("ProfileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("CellSync.Domain.Entities.Cell", b =>
                {
                    b.HasOne("CellSync.Domain.Entities.Member", "CurrentLeader")
                        .WithMany("LedCells")
                        .HasForeignKey("CurrentLeaderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentLeader");
                });

            modelBuilder.Entity("CellSync.Domain.Entities.CellLeaderHistory", b =>
                {
                    b.HasOne("CellSync.Domain.Entities.Cell", "Cell")
                        .WithMany("CellLeaderHistory")
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CellSync.Domain.Entities.Member", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cell");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("CellSync.Domain.Entities.Meeting", b =>
                {
                    b.HasOne("CellSync.Domain.Entities.Cell", "Cell")
                        .WithMany()
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CellSync.Domain.Entities.Member", "Leader")
                        .WithMany("LedMeetings")
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Cell");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("CellSync.Domain.Entities.MeetingMember", b =>
                {
                    b.HasOne("CellSync.Domain.Entities.Meeting", null)
                        .WithMany("MeetingMembers")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CellSync.Domain.Entities.Member", null)
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CellSync.Domain.Entities.Cell", b =>
                {
                    b.Navigation("CellLeaderHistory");
                });

            modelBuilder.Entity("CellSync.Domain.Entities.Meeting", b =>
                {
                    b.Navigation("MeetingMembers");
                });

            modelBuilder.Entity("CellSync.Domain.Entities.Member", b =>
                {
                    b.Navigation("LedCells");

                    b.Navigation("LedMeetings");
                });
#pragma warning restore 612, 618
        }
    }
}
